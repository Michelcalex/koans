{"version":3,"sources":["koans.js"],"names":["trial","truthy"],"mappings":";;AAAA;;;;;;AACA;;AAEA;;;;;;;;;AASA;;;;;;;;;;;;AAYA,mBAAK,yCAAL,EAAgD,UAAUA,KAAV,EAAiB;AAC/DA,QAAMC,MAAN,CAAa,IAAb;AACD,CAFD;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"koans.js","sourcesContent":["import test from 'ava';\n//const __ = undefined\n\n/**\n * Your overall goal for this assignment is to get all of the tests to pass.\n * This is an exercise both in testing as well as in the Javascript language\n * itself.\n * \n * Replace all of the __ in the tests below with the appropriate value to \n * make the test pass.\n */\n\n/**\n * Assertions\n * \n * There are different types of assertions built-in to Ava, which are meant\n * for setting up different kinds of tests.\n * \n * You can read up on all of the assertion types here:\n * https://github.com/avajs/ava#assertions\n * \n * We used the is() assertion in class today.\n */\n\ntest('What will satisfy the truthy assertion?', function (trial) {\n  trial.truthy(true);\n});\n\n// test('What is a falsey value?', function (trial) {\n//   trial.falsy(__);\n// });\n\n// test('What is true?', function (trial) {\n//   trial.true(__);\n// });\n\n// test('What is false?', function (trial) {\n//   trial.false(__);\n// });\n\n// test('What will satisfy the equality assertion?', function (trial) {\n//   trial.is(__, 1 + 1);\n// });\n\n// test('What will satisfy the inequality assertion?', function (trial) {\n//   trial.not(__, 1 + 1)\n// })\n\n// /**\n//  * Operators\n//  */\n\n// test('What is addition?', function (trial) {\n//   trial.is(28 + __, 42)\n// })\n\n// test('What is assignment addition?', function (trial) {\n//   let result = 34\n//   result += 23 // Equivalent to `result = result + n`; but more concise.\n\n//   trial.is(__, result)\n// })\n\n// test('What is subtraction?', function (trial) {\n//   trial.is(30 - __, 21)\n// })\n\n// test('What is assignment subtraction?', function (trial) {\n//   let result = 5\n//   result -= 2\n\n//   trial.is(__, result)\n// })\n\n// // Assignment operators are available for multiplication and division as well.\n// // Let's do one more, the modulo (%) operator, used for showing division remainder.\n\n// test('What is modulus?', function (trial) {\n//   const x = 5\n//   let result = 10\n//   result %= x // Same as `result = result % x`.\n\n//   trial.is(__, result, 'What is the value of result?')\n// })\n\n// /**\n//  * Equality\n//  */\n\n// test('What is ===?', function (trial) {\n//   const numberLiteral = 3\n\n//   trial.true(__ === numberLiteral)\n// })\n\n// test('What is ==?', function (trial) {\n//   const quotedNumber = '3'\n\n//   trial.true(quotedNumber == __)\n// })\n\n// /**\n//  * Truthyness\n//  *   https://developer.mozilla.org/en-US/docs/Glossary/Truthy\n//  */\n\n// test('What is the truthyness of positive numbers?', function (trial) {\n//   const oneIsTruthy = !!1\n\n//   trial.is(__, oneIsTruthy)\n// })\n\n// test('What is the truthyness of negative numbers?', function (trial) {\n//   const negativeOneIsTruthy = !!-1\n\n//   trial.is(__, negativeOneIsTruthy)\n// })\n\n// /**\n//  * Assignment\n//  */\n\n// test('Assigning a value to a local variable.', function (trial) {\n//   let one\n//   one = 1\n\n//   trial.is(__, one)\n// })\n\n// /**\n//  * Numbers\n//  */\n\n// // typeof() is a function that returns the type of its parameter as \n// // a string.\n// test('What is the javascript numeric type?', function (trial) {\n//   trial.is(__, typeof(42));\n// })\n\n\n// test('Are integers and floats the same type?', function (trial) {\n//   trial.is(__, typeof(3.14159) === typeof(6))\n// })\n\n// /**\n//  * NaN\n//  * \n//  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n//  */\n// test('What is NaN?', function (trial) {\n//   const resultOfFailedOperations = 42 / 'wat'\n\n//   trial.is(__, isNaN(resultOfFailedOperations))\n// })\n\n// /**\n//  * Strings\n//  */\n// test('Are similar strings with different quote styles equal?', function (trial) {\n//   const doubleQuotedString = \"apple\"\n//   const singleQuotedString = 'apple'\n\n//   trial.is(__, doubleQuotedString === singleQuotedString)\n// })\n\n// test('What is string concatenation?', function (trial) {\n//   const fruit = 'apple'\n//   const dish = 'pie'\n\n//   trial.is(__, fruit + ' ' + dish)\n// })\n\n// test('How do you find the length of a string?', function (trial) {\n//   const fruit = 'apple'\n\n//   trial.is(__, fruit.length)\n// })\n\n// test('What is slicing a string?', function (trial) {\n//   const fruit = 'apple pie'\n\n//   trial.is(__, fruit.slice(0, 5))\n// })\n\n// /**\n//  * Control Structures\n//  */\n\n// test('What is an if statement?', function (trial) {\n//   const two = 2\n//   let isPositive = false\n//   if (two > 0) {\n//     isPositive = true\n//   }\n\n//   trial.is(__, isPositive)\n// })\n\n// test('What is a for loop?', function (trial) {\n//   let counter = 10\n//   for (let i = 1; i <= 3; i++) {\n//     counter = counter + i\n//   }\n\n//   trial.is(__, counter)\n// })\n\n// /**\n//  * Ternary operators (similar to 'if' statement)\n//  * \n//  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n//  */\n// test('What is a ternary operator?', function (trial) {\n//   const two = 2\n//   let fruit = two > 0 ? 'apple' : 'orange'\n//   trial.is(__, fruit)\n\n//   fruit = two < 0 ? 'apple' : 'orange'\n//   trial.is(__, fruit)\n// })\n\n// /**\n//  * Arrays\n//  */\n\n// test('What is indexing an array literal', function (trial) {\n//   const things = ['cellar door', 42, true]\n\n//   trial.is(__, things[0])\n//   trial.is(__, things[1])\n//   trial.is(__, things[2])\n// })\n\n// test('What is the type of an array?', function (trial) {\n//   trial.is(__, typeof([]))\n// })\n\n// test('What is the length of of an array?', function (trial) {\n//   trial.is(__, ['a', 'b', 'c'].length)\n// })\n\n// test('What are stack methods on arrays?', function (trial) {\n//   let stack = []\n//   stack.push('first')\n//   stack.push('second')\n\n//   trial.is(__, stack.pop())\n//   trial.is(__, stack.pop())\n// })\n\n// test('What are queue methods on arrays?', function (trial) {\n//   const queue = []\n//   queue.push('first')\n//   queue.push('second')\n//   queue.unshift('third')\n\n//   trial.is(__, queue.shift())\n//   trial.is(__, queue.shift())\n// })\n\n// /**\n//  * Objects\n//  */\n\n// test('What is the type of an object?', function (trial) {\n//   trial.is(__, typeof({}))\n// })\n\n// test('What is object literal notation?', function (trial) {\n//   let person = {\n//     name: 'Amory Blaine',\n//     age: 102\n//   }\n\n//   trial.is(__, person.name)\n//   trial.is(__, person.age)\n// })\n\n// test('Dynamically adding properties to an object.', function (trial) {\n//   const person = {}\n//   person.__ = 'Amory Blaine'\n//   person.__ = 102\n//   trial.is('Amory Blaine', person.name)\n//   trial.is(102, person.age)\n// })\n\n// /**\n//  * Array syntax for objects\n//  */\n// test('Accessing object properties with strings.', function (trial) {\n//   const person = { name: 'Amory Blaine', age: 102 }\n\n//   trial.is(person['__'], 'Amory Blaine')\n//   trial.is(person['__'], 102)\n// })"]}